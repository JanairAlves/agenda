unit uModelContato;

interface

uses
  System.SysUtils, System.Classes, REST.JsonReflect;

type
  [JsonReflect]
  TMContato = class
    private
      [JSONNameAttribute('Id')]
      FId: integer;
      [JSONNameAttribute('Nome')]
      FNome: string;
      [JSONNameAttribute('Sobrenome')]
      FSobrenome: string;
      [JSONNameAttribute('Apelido')]
      FApelido: string;
      [JSONNameAttribute('Nascimento')]
      FNascimento: TDate;
      [JSONNameAttribute('Relacionamento')]
      FRelacionamento: string;
      [JSONNameAttribute('Excluído')]
      FExcluido: char;
      function GetId: integer;
      function GetNome: string;
      function GetApelido: string;
      function GetExcluido: char;
      function GetNascimento: string;
      function GetSobrenome: string;
      function GetRelacionamento: string;
      procedure SetId(const Value: integer);
      procedure SetNome(const Value: string);
      procedure SetExcluido(const Value: char);
      procedure SetApelido(const Value: string);
      procedure SetNascimento(const Value: string);
      procedure SetSobrenome(const Value: string);
      procedure SetRelacionamento(const Value: string);
    public
      property Id: integer read GetId write SetId;
      property Nome: string read GetNome write SetNome;
      property Sobrenome: string read GetSobrenome write SetSobrenome;
      property Apelido: string read GetApelido write SetApelido;
      property Nascimento: string read GetNascimento write SetNascimento;
      property Relacionamento: string read GetRelacionamento write SetRelacionamento;
      property Excluido: char read GetExcluido write SetExcluido;
  end;

  TMRepositorioContato = class
    function Salvar(contato: TMContato): boolean;
    function Deletar(id: integer): boolean;
    function ConsultarPorId(id: integer): TMContato;
    function ConsultarTodos: TList;
    function SerializarJson(contato: TMContato): string;
    procedure ValidarContato(contato: TMContato);
    function ValidarData(data: string): boolean;
  end;

const
 numeroInvalido: integer = -0;

implementation

uses
  REST.Json, System.IOUtils;

{ TMContato }

function TMContato.GetApelido: string;
begin
  result := FApelido;
end;

function TMContato.GetExcluido: char;
begin
  result := FExcluido;
end;

function TMContato.GetId: integer;
begin
  result := FId;
end;

function TMContato.GetNascimento: string;
begin
  result := FNascimento;
end;

function TMContato.GetNome: string;
begin
  result := FNome;
end;

function TMContato.GetSobrenome: string;
begin
  result := FSobrenome;
end;

function TMContato.GetRelacionamento: string;
begin
  result := FRelacionamento;
end;

procedure TMContato.SetApelido(const Value: string);
begin
  FApelido := Value;
end;

procedure TMContato.SetExcluido(const Value: char);
begin
  FExcluido := Value;
end;

procedure TMContato.SetId(const Value: integer);
begin
  { Não Implementar esse método. }
end;

procedure TMContato.SetNascimento(const Value: string);
begin
  FNascimento := Value;
end;

procedure TMContato.SetNome(const Value: string);
begin
  FNome := Value;
end;

procedure TMContato.SetSobrenome(const Value: string);
begin
  FSobrenome := Value;
end;

procedure TMContato.SetRelacionamento(const Value: string);
begin
  FRelacionamento := Value;
end;

{ TMRepositorioContato }

function TMRepositorioContato.ConsultarPorId(id: integer): TMContato;
begin

end;

function TMRepositorioContato.ConsultarTodos: TList;
begin

end;

function TMRepositorioContato.Deletar(id: integer): boolean;
begin

end;

function TMRepositorioContato.Salvar(contato: TMContato): boolean;
var
  contatoJsonStr: string;
begin
  try
    contatoJsonStr := SerializarJson(contato);
    TFile.WriteAllText('Contatos.json', contatoJsonStr);
  except
    on E: Exception do
    raise;
  end;
end;

function TMRepositorioContato.SerializarJson(contato: TMContato): string;
begin
  ValidarContato(contato);
  result := TJson.ObjectToJsonString(contato, [joIndentCasePreserve]);
end;

procedure TMRepositorioContato.ValidarContato(contato: TMContato);
begin
  if contato.Id <= 0 then
    raise Exception.Create('Id do contato inválido.');

  if (contato.Nome = '') or (contato.FNome = ' ') then
    raise Exception.Create('O nome do contato não pode ser vázio.');

  if (contato.Relacionamento = '') or (contato.FRelacionamento = ' ') then
    raise Exception.Create('O relacionamento precisa ser informado.');

  if (contato.Excluido = '') or (contato.Excluido = ' ') then
    raise Exception.Create('A exclusão lógica precisa ser informada com ''S'' ou ''N''.');

  if not ValidarData(contato.Nascimento) then
    raise Exception.Create('Data de nascimento inválida.');
end;

function TMRepositorioContato.ValidarData(data: string): boolean;
var
  dataValida: TDateTime;
begin
  dataValida := numeroInvalido;
  TryStrToDate(data, dataValida);
end;

end.

